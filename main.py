import os
import threading
import requests
from telebot import TeleBot
from flask import Flask
from datetime import datetime
from keep_alive import keep_alive
from io import BytesIO

# Gi·ªØ Flask s·ªëng
keep_alive()

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = TeleBot(BOT_TOKEN)
processes = []
last_spam_time = {}
# ID nh√≥m ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot
ALLOWED_GROUP_ID = -1002639856138
GROUP_LINK = "https://t.me/HaoEsport01"

def group_only(func):
    def wrapper(message):
        if message.chat.id == ALLOWED_GROUP_ID:
            return func(message)
        else:
            bot.reply_to(
                message,
                f"‚ùó Bot ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m n√†y: <a href=\"{GROUP_LINK}\">T·∫°i ƒê√¢y</a>",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
    return wrapper

#video
# H√†m l·∫•y video t·ª´ API
def get_random_video():
    try:
        res = requests.get("https://api.ffcommunity.site/randomvideo.php", timeout=5)
        data = res.json()
        return data.get("url")
    except:
        return None

@bot.message_handler(commands=['video'])
@group_only
def random_video(message):
    video_url = get_random_video()
    if video_url:
        try:
            bot.send_chat_action(message.chat.id, "upload_video")
            bot.send_video(
                message.chat.id,
                video=video_url,
                caption="Video g√°i xinh By @CertainllyBot"
            )
        except Exception as e:
            bot.send_message(message.chat.id, "L·ªói khi g·ª≠i video.")
    else:
        bot.send_message(message.chat.id, "Kh√¥ng l·∫•y ƒë∆∞·ª£c video, th·ª≠ l·∫°i sau nh√©!")
#spam
import phonenumbers
from phonenumbers import carrier

def get_network(phone):
    try:
        number = phonenumbers.parse(f"+84{phone[1:]}" if phone.startswith("0") else phone, "VN")
        return carrier.name_for_number(number, "vi") or "Kh√¥ng x√°c ƒë·ªãnh"
    except:
        return "Kh√¥ng x√°c ƒë·ªãnh"

@bot.message_handler(commands=['spam'])
def supersms(message):
    user_id = message.from_user.id
    current_time = time.time()
    if user_id in user_last_command_time:
        elapsed_time = current_time - user_last_command_time[user_id]
        if elapsed_time < 100:
            remaining_time = 100 - elapsed_time
            bot.reply_to(message, f"Vui l√≤ng ƒë·ª£i {remaining_time:.1f} gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh l·∫°i.")
            return

    params = message.text.split()[1:]
    if len(params) != 2:
        bot.reply_to(message, "/spam sdt s·ªë_l·∫ßn (t·ªëi ƒëa 10)")
        return

    sdt, count = params
    if not count.isdigit():
        bot.reply_to(message, "S·ªë l·∫ßn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªâ nh·∫≠p s·ªë.")
        return

    count = int(count)
    if count > 10:
        bot.reply_to(message, "S·ªë l·∫ßn t·ªëi ƒëa l√† 10.")
        return

    if sdt in blacklist:
        bot.reply_to(message, f"S·ªë ƒëi·ªán tho·∫°i {sdt} ƒë√£ b·ªã c·∫•m spam.")
        return

    sdt_request = f"84{sdt[1:]}" if sdt.startswith("0") else sdt
    network = get_network(sdt)

    diggory_chat3 = f'''{name_bot}
‚ï≠ Spam: Th√†nh C√¥ng 
‚îú Ng∆∞·ªùi d√πng: {message.from_user.username}
‚îú S·ªë L·∫ßn Spam: {count}
‚îú Nh√† M·∫°ng: {network}
‚ï∞ ƒêang T·∫•n C√¥ng: {sdt}'''

    try:
        if not os.path.isfile("dec.py"):
            bot.reply_to(message, "Kh√¥ng t√¨m th·∫•y file script.")
            return

        with tempfile.NamedTemporaryFile(delete=False, suffix=".py") as temp_file:
            with open("dec.py", 'r', encoding='utf-8') as file:
                temp_file.write(file.read().encode('utf-8'))
            temp_path = temp_file.name

        subprocess.Popen(["python", temp_path, sdt, str(count)])

        bot.send_message(
            message.chat.id,
            f'<blockquote>{diggory_chat3}</blockquote>\n<blockquote> G√ìI D√ôNG : FREE</blockquote>',
            parse_mode='HTML'
        )

        requests.get(f'https://dichvukey.site/apivl/call1.php?sdt={sdt_request}')
        user_last_command_time[user_id] = time.time()

    except Exception as e:
        bot.reply_to(message, "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.")
        print(e)

        
last_usage = {}
blacklist = ["112", "113", "114", "115", "116", "117", "118", "119", "0", "1", "2", "3", "4", "078901631"]




@bot.message_handler(content_types=['new_chat_members'])
def welcome_user(message):
    for user in message.new_chat_members:
        uid = user.id
        username = f"@{user.username}" if user.username else "Kh√¥ng c√≥"
        full_name = f"{user.first_name} {user.last_name or ''}".strip()
        time_joined = datetime.now().strftime("%H:%M:%S | %d/%m/%Y")

        video_url = get_random_video()
        if not video_url:
            bot.send_message(message.chat.id, f"Ch√†o m·ª´ng {full_name} nh√©! (Kh√¥ng l·∫•y ƒë∆∞·ª£c video)")
            return

        try:
            video_resp = requests.get(video_url)
            video_file = BytesIO(video_resp.content)
            video_file.name = "https://i.imgur.com/YV2Wzoq.mp4"

            caption = f"""üñê Hello <b>{full_name}</b>
‚îú UID: <code>{uid}</code>
‚îú Username: {username}
‚îú Th·ªùi Gian: <code>{time_joined}</code>
‚îî <i>Ch√†o M·ª´ng B·∫°n ƒê√£ Tham Gia Nh√≥m <b>Box H√†o Esports</b></i>
G√µ /bot ƒê·ªÉ Xem L·ªánh Bot H·ªó Tr·ª£ Nh√©!"""

            bot.send_video(
                chat_id=message.chat.id,
                video=video_file,
                caption=caption,
                parse_mode="HTML"
            )
        except:
            bot.send_message(message.chat.id, f"Ch√†o m·ª´ng {full_name} nh√©! (G·ª≠i video l·ªói)")

# Flask Server cho Render / UptimeRobot
def run_flask():
    app = Flask(__name__)

    @app.route('/')
    def home():
        return "Bot ƒëang ho·∫°t ƒë·ªông tr√™n Render!"

    app.run(host="0.0.0.0", port=8080)

# Thread cho Flask
flask_thread = threading.Thread(target=run_flask)
flask_thread.start()

# Thread cho bot Telegram
def run_bot():
    bot.polling(non_stop=True)

bot_thread = threading.Thread(target=run_bot)
bot_thread.start()
