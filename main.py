import os
import random
import time
import requests
import telebot
from telebot.types import Message
from telebot import TeleBot
from flask import Flask, request
from datetime import datetime, timedelta

BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
ALLOWED_GROUP_IDS = [-1002631911391, -1002282514761]

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot ƒëang ho·∫°t ƒë·ªông tr√™n Render!"

REQUIRED_CHANNEL = "@freesourceff"  # Thay b·∫±ng t√™n ho·∫∑c ID k√™nh th·ª±c t·∫ø

def is_user_member(user_id):
    try:
        member = bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False


@bot.message_handler(commands=['like','Like'])
def handle_like(message):
    user_id = message.from_user.id

    if message.chat.id not in ALLOWED_GROUP_IDS:
        bot.reply_to(message, "Bot ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m n√†y.\nLink: https://t.me/tranhao1166", parse_mode="HTML")
        return

    if not is_user_member(user_id):
        bot.reply_to(message, "B·∫°n c·∫ßn tham gia k√™nh tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh n√†y:\nhttps://t.me/freesourceff", parse_mode="HTML")
        return

    parts = message.text.split()
    if len(parts) < 3:
        bot.reply_to(message, "Please provide a valid region and UID. Example: /like sg 10000001", parse_mode="HTML")
        return

    region = parts[1]
    uid = parts[2]

    loading_msg = bot.reply_to(message, f"‚è≥Sending likes to {uid}, please wait...", parse_mode="HTML")

    try:
        api_url = f"http://160.250.137.144:5001/like?uid={uid}&server_name={region}&key=qqwweerrb"
        response = requests.get(api_url, timeout=15)

        if response.status_code != 200:
            bot.edit_message_text(
                chat_id=loading_msg.chat.id,
                message_id=loading_msg.message_id,
                text="An error occurred. Please check account region or try again laterü•≤.",
                parse_mode="HTML"
            )
            return

        data = response.json()

        if "LikesGivenByAPI" not in data or "LikesbeforeCommand" not in data or "LikesafterCommand" not in data:
            bot.edit_message_text(
                chat_id=loading_msg.chat.id,
                message_id=loading_msg.message_id,
                text="An error occurred. Please check account region or try again laterü•≤.",
                parse_mode="HTML"
            )
            return

        if data["LikesGivenByAPI"] == 0:
            bot.edit_message_text(
                chat_id=loading_msg.chat.id,
                message_id=loading_msg.message_id,
                text=f"üíî UID {uid} has already received Max Likes for Today üíî. Please Try a different UID.",
                parse_mode="HTML"
            )
            return

        nickname = data.get("PlayerNickname", "Unknown")
        uid = data.get("UID", "Unknown")
        likes_before = data["LikesbeforeCommand"]
        likes_after = data["LikesafterCommand"]
        likes_given_by_bot = likes_after - likes_before

        reply = (
            f"Player Nickname: {nickname}\n"
            f"Player UID: {uid}\n"
            f"Likes before Command: {likes_before}\n"
            f"Likes after Command: {likes_after}\n"
            f"Likes given by bot: {likes_given_by_bot}"
        )

        bot.edit_message_text(
            chat_id=loading_msg.chat.id,
            message_id=loading_msg.message_id,
            text=reply,
            parse_mode="HTML"
        )

    except Exception:
        bot.edit_message_text(
            chat_id=loading_msg.chat.id,
            message_id=loading_msg.message_id,
            text="ƒêang l·ªói ho·∫∑c ƒëang b·∫£o tr√¨ vui l√≤ng th·ª≠ l·∫°i sau üíî.",
            parse_mode="HTML"
        )


@bot.message_handler(commands=['checkban'])
def checkban_user(message):
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "Vui l√≤ng nh·∫≠p UID. V√≠ d·ª•: /checkban 12345678")
        return

    uid = args[1]
    url = f"https://check-band-p-3uv9.vercel.app/haoesports-region/ban-info?uid={uid}"

    try:
        # G·ª≠i tin nh·∫Øn ƒëang x·ª≠ l√Ω
        sent = bot.reply_to(message, "‚è≥ ƒêang ki·ªÉm tra UID...")

        response = requests.get(url)
        data = response.json()

        nickname = data.get('nickname', 'Kh√¥ng c√≥ d·ªØ li·ªáu')
        uid = data.get('uid', 'Kh√¥ng C√≥ Uid')
        region = data.get('region', 'Kh√¥ng x√°c ƒë·ªãnh')
        ban_status = data.get('ban_status', 'Kh√¥ng r√µ')
        ban_period = data.get('ban_period')
        copyright_ = data.get('copyright')

        reply = (
            "<blockquote>"
            f"‚úÖ <b>Th√¥ng tin ng∆∞·ªùi ch∆°i:</b>\n"
            f"‚Ä¢ üë§ Nickname: <code>{nickname}</code>\n"
            f"‚Ä¢ üÜî ID: <code>{uid}</code>\n"
            f"‚Ä¢ üåé Khu v·ª±c: <code>{region}</code>\n"
            f"‚Ä¢ üö´ Tr·∫°ng th√°i ban: <code>{ban_status}</code>\n"
            f"‚Ä¢ ‚è≥ Th·ªùi gian ban: <code>{ban_period if ban_period else 'Kh√¥ng b·ªã ban'}</code>\n"
            f"‚Ä¢ ¬©Ô∏è Li√™n H·ªá: <code>{copyright_}</code>"
            "</blockquote>"
        )

        bot.edit_message_text(
            chat_id=sent.chat.id,
            message_id=sent.message_id,
            text=reply,
            parse_mode='HTML'
        )

    except Exception as e:
        bot.edit_message_text(
            chat_id=sent.chat.id,
            message_id=sent.message_id,
            text=f"ƒê√£ x·∫£y ra l·ªói: {e}"
        )

import requests
from io import BytesIO

def get_random_video():
    try:
        res = requests.get("https://api.ffcommunity.site/randomvideo.php", timeout=5)
        data = res.json()
        return data.get("url")
    except:
        return None

@bot.message_handler(commands=['video'])
def random_video(message):
    if message.chat.id not in ALLOWED_GROUP_IDS:
        bot.reply_to(message, "Bot Ch·ªâ Ho·∫°t ƒê·ªông Trong Nh√≥m N√†y.\nLink: https://t.me/tranhao1166")
        return

    video_url = get_random_video()
    if video_url:
        try:
            bot.send_chat_action(message.chat.id, "upload_video")
            res = requests.get(video_url, stream=True, timeout=10)
            if res.status_code == 200:
                video_file = BytesIO(res.content)
                video_file.name = "video.mp4"
                bot.send_video(message.chat.id, video=video_file, caption="Video g√°i xinh By @tranhao116")
            else:
                bot.send_message(message.chat.id, "Kh√¥ng th·ªÉ t·∫£i video t·ª´ ngu·ªìn.")
        except Exception as e:
            print("L·ªói g·ª≠i video:", e)
            bot.send_message(message.chat.id, "L·ªói khi g·ª≠i video.")
    else:
        bot.send_message(message.chat.id, "Kh√¥ng l·∫•y ƒë∆∞·ª£c video, th·ª≠ l·∫°i sau nh√©!")
        
@bot.message_handler(commands=["admin"])
def cmd_test(message):
    bot.reply_to(message, "<blockquote>‚úÖ Li√™n H·ªá: @tranhao116!</blockquote>", parse_mode="HTML")

@app.route(f"/{BOT_TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return 'ok', 200

#cc
if __name__ == "__main__":
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
    if not WEBHOOK_URL:
        raise Exception("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng WEBHOOK_URL")

    # X√≥a webhook c≈© v√† thi·∫øt l·∫≠p webhook m·ªõi
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")

    # Ch·∫°y Flask (webhook listener)
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
