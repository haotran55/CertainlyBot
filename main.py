import os
import threading
import requests
import telebot  # Th√™m d√≤ng n√†y ƒë·ªÉ s·ª≠ d·ª•ng telebot
from flask import Flask, request
from datetime import datetime
from io import BytesIO

# L·∫•y token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BOT_TOKEN = os.environ.get('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)
ALLOWED_GROUP_IDS = [-1002639856138]

# Flask App
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot ƒëang ho·∫°t ƒë·ªông tr√™n Render!"


# H√†m l·∫•y t√™n item (n·∫øu c·∫ßn t√™n)
@bot.message_handler(func=lambda message: message.text.lower().startswith('get'))
def get_player_stats(message):
    if message.chat.id not in ALLOWED_GROUP_IDS:
        bot.reply_to(message, "‚ùå Bot Ch·ªâ Ho·∫°t ƒê·ªông Trong Nh√≥m N√†y.\nüëâ Link: https://t.me/HaoEsport01")
        return
        
    try:
        parts = message.text.split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå Format: Get {UID} {region}")
            return

        uid = parts[1]
        region = parts[2].upper()

        api_url = f"https://free-fire-gnwz.onrender.com/api/account?uid={uid}&region={region}"

        response = requests.get(api_url)
        data = response.json()

        # Tr√≠ch xu·∫•t d·ªØ li·ªáu
        basic = data.get("basicInfo", {})
        profile = data.get("profileInfo", {})
        clan = data.get("clanBasicInfo", {})
        pet = data.get("petInfo", {})
        social = data.get("socialInfo", {})
        credit = data.get("creditScoreInfo", {})

        response_text = f"""
üéÆ ùóôùó•ùóòùóò ùóôùóúùó•ùóò ùóîùóñùóñùó¢ùó®ùó°ùóß ùóúùó°ùóôùó¢ üéÆ

üë§ ùó£ùóüùóîùó¨ùóòùó• ùóóùóòùóßùóîùóúùóüùó¶
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù Name: {basic.get('nickname', 'N/A')}
üÜî UID: {uid}
üåç Region: {basic.get('region', 'N/A')}
üìä Level: {basic.get('level', 'N/A')}
‚ù§Ô∏è Likes: {basic.get('liked', 'N/A')}
üéÆ Version: {basic.get('releaseVersion', 'N/A')}

üñºÔ∏è ùóúùó†ùóîùóöùóòùó¶ (ID Only)
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üßë Avatar ID: {profile.get('avatarId', 'N/A')}
üé® Banner ID: {basic.get('bannerId', 'N/A')}
üñºÔ∏è HeadPic ID: {basic.get('headPic', 'N/A')}

üèÜ ùó•ùóîùó°ùóû ùóúùó°ùóôùó¢
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéØ BR Rank ID: {basic.get('rank', 'N/A')}
üìà BR Points: {basic.get('rankingPoints', 'N/A')}
‚öîÔ∏è CS Rank ID: {basic.get('csRank', 'N/A')}
üìä CS Points: {basic.get('csRankingPoints', 'N/A')}

üè∞ ùóñùóüùóîùó° ùóúùó°ùóôùó¢
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üè∑Ô∏è Name: {clan.get('clanName', 'N/A')}
üìë ID: {clan.get('clanId', 'N/A')}
üìà Level: {clan.get('clanLevel', 'N/A')}
üë• Members: {clan.get('memberNum', 'N/A')}/{clan.get('capacity', 'N/A')}

üêæ ùó£ùóòùóß ùóúùó°ùóôùó¢
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üê∂ Name: {pet.get('name', 'N/A')}
üÜî ID: {pet.get('id', 'N/A')}
üìä Level: {pet.get('level', 'N/A')}
‚≠ê EXP: {pet.get('exp', 'N/A')}

üì± ùó¶ùó¢ùóñùóúùóîùóü ùóúùó°ùóôùó¢
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üåê Language: {social.get('language', 'N/A')}
üéÆ Preferred Mode: {social.get('modePrefer', 'N/A')}
üìù Bio: {social.get('signature', 'N/A')}

üìä ùóñùó•ùóòùóóùóúùóß ùó¶ùóñùó¢ùó•ùóò
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíØ Score: {credit.get('creditScore', 'N/A')}
"""

        # Danh s√°ch v≈© kh√≠
        weapon_skins = basic.get("weaponSkinShows", [])
        if weapon_skins:
            response_text += "\n\n‚öîÔ∏è ùóòùó§ùó®ùóúùó£ùó£ùóòùóó ùó™ùóòùóîùó£ùó¢ùó°ùó¶\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            for idx, weapon_id in enumerate(weapon_skins, 1):
                response_text += f"\nüî´ Weapon {idx}: ID {weapon_id}"

        # Trang ph·ª•c
        outfits = profile.get("clothes", [])
        if outfits:
            response_text += "\n\nüé≠ ùóòùó§ùó®ùóúùó£ùó£ùóòùóó ùó¢ùó®ùóßùóôùóúùóßùó¶\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            for idx, cloth_id in enumerate(outfits, 1):
                response_text += f"\nüëî Outfit {idx}: ID {cloth_id}"

        if len(response_text) > 4096:
            for x in range(0, len(response_text), 4096):
                bot.reply_to(message, response_text[x:x+4096])
        else:
            bot.reply_to(message, response_text)

    except Exception as e:
        bot.reply_to(message, f"‚ùå An error occurred: {str(e)}")
        if "data" in locals():
            bot.reply_to(message, f"Debug info: {json.dumps(data, indent=2)}")



# Webhook nh·∫≠n update t·ª´ Telegram
@app.route(f"/{BOT_TOKEN}", methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return 'ok', 200

# Kh·ªüi ch·∫°y Flask v√† bot song song
if __name__ == "__main__":
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
    if not WEBHOOK_URL:
        raise Exception("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng WEBHOOK_URL")

    # X√≥a webhook c≈© v√† thi·∫øt l·∫≠p webhook m·ªõi
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")

    # Ch·∫°y Flask (webhook listener)
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))

